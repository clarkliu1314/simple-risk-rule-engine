/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.google.code.simplerule.proxy.risk.monitor.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class InterfaceStatus implements org.apache.thrift.TBase<InterfaceStatus, InterfaceStatus._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InterfaceStatus");

  private static final org.apache.thrift.protocol.TField LAST_VISIT_FIELD_DESC = new org.apache.thrift.protocol.TField("lastVisit", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FAILURE_FIELD_DESC = new org.apache.thrift.protocol.TField("failure", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HEALTH_FIELD_DESC = new org.apache.thrift.protocol.TField("health", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField AVERAGE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("averageTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField MAX_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxTime", org.apache.thrift.protocol.TType.I64, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new InterfaceStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new InterfaceStatusTupleSchemeFactory());
  }

  public String lastVisit; // required
  public int success; // required
  public int failure; // required
  public int health; // required
  public long averageTime; // required
  public long maxTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    LAST_VISIT((short)1, "lastVisit"),
    SUCCESS((short)2, "success"),
    FAILURE((short)3, "failure"),
    HEALTH((short)4, "health"),
    AVERAGE_TIME((short)5, "averageTime"),
    MAX_TIME((short)6, "maxTime");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // LAST_VISIT
          return LAST_VISIT;
        case 2: // SUCCESS
          return SUCCESS;
        case 3: // FAILURE
          return FAILURE;
        case 4: // HEALTH
          return HEALTH;
        case 5: // AVERAGE_TIME
          return AVERAGE_TIME;
        case 6: // MAX_TIME
          return MAX_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUCCESS_ISSET_ID = 0;
  private static final int __FAILURE_ISSET_ID = 1;
  private static final int __HEALTH_ISSET_ID = 2;
  private static final int __AVERAGETIME_ISSET_ID = 3;
  private static final int __MAXTIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.LAST_VISIT, new org.apache.thrift.meta_data.FieldMetaData("lastVisit", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.FAILURE, new org.apache.thrift.meta_data.FieldMetaData("failure", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HEALTH, new org.apache.thrift.meta_data.FieldMetaData("health", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.AVERAGE_TIME, new org.apache.thrift.meta_data.FieldMetaData("averageTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.MAX_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InterfaceStatus.class, metaDataMap);
  }

  public InterfaceStatus() {
  }

  public InterfaceStatus(
    String lastVisit,
    int success,
    int failure,
    int health,
    long averageTime,
    long maxTime)
  {
    this();
    this.lastVisit = lastVisit;
    this.success = success;
    setSuccessIsSet(true);
    this.failure = failure;
    setFailureIsSet(true);
    this.health = health;
    setHealthIsSet(true);
    this.averageTime = averageTime;
    setAverageTimeIsSet(true);
    this.maxTime = maxTime;
    setMaxTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InterfaceStatus(InterfaceStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetLastVisit()) {
      this.lastVisit = other.lastVisit;
    }
    this.success = other.success;
    this.failure = other.failure;
    this.health = other.health;
    this.averageTime = other.averageTime;
    this.maxTime = other.maxTime;
  }

  public InterfaceStatus deepCopy() {
    return new InterfaceStatus(this);
  }

  @Override
  public void clear() {
    this.lastVisit = null;
    setSuccessIsSet(false);
    this.success = 0;
    setFailureIsSet(false);
    this.failure = 0;
    setHealthIsSet(false);
    this.health = 0;
    setAverageTimeIsSet(false);
    this.averageTime = 0;
    setMaxTimeIsSet(false);
    this.maxTime = 0;
  }

  public String getLastVisit() {
    return this.lastVisit;
  }

  public InterfaceStatus setLastVisit(String lastVisit) {
    this.lastVisit = lastVisit;
    return this;
  }

  public void unsetLastVisit() {
    this.lastVisit = null;
  }

  /** Returns true if field lastVisit is set (has been assigned a value) and false otherwise */
  public boolean isSetLastVisit() {
    return this.lastVisit != null;
  }

  public void setLastVisitIsSet(boolean value) {
    if (!value) {
      this.lastVisit = null;
    }
  }

  public int getSuccess() {
    return this.success;
  }

  public InterfaceStatus setSuccess(int success) {
    this.success = success;
    setSuccessIsSet(true);
    return this;
  }

  public void unsetSuccess() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  /** Returns true if field success is set (has been assigned a value) and false otherwise */
  public boolean isSetSuccess() {
    return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
  }

  public void setSuccessIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
  }

  public int getFailure() {
    return this.failure;
  }

  public InterfaceStatus setFailure(int failure) {
    this.failure = failure;
    setFailureIsSet(true);
    return this;
  }

  public void unsetFailure() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FAILURE_ISSET_ID);
  }

  /** Returns true if field failure is set (has been assigned a value) and false otherwise */
  public boolean isSetFailure() {
    return EncodingUtils.testBit(__isset_bitfield, __FAILURE_ISSET_ID);
  }

  public void setFailureIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FAILURE_ISSET_ID, value);
  }

  public int getHealth() {
    return this.health;
  }

  public InterfaceStatus setHealth(int health) {
    this.health = health;
    setHealthIsSet(true);
    return this;
  }

  public void unsetHealth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HEALTH_ISSET_ID);
  }

  /** Returns true if field health is set (has been assigned a value) and false otherwise */
  public boolean isSetHealth() {
    return EncodingUtils.testBit(__isset_bitfield, __HEALTH_ISSET_ID);
  }

  public void setHealthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HEALTH_ISSET_ID, value);
  }

  public long getAverageTime() {
    return this.averageTime;
  }

  public InterfaceStatus setAverageTime(long averageTime) {
    this.averageTime = averageTime;
    setAverageTimeIsSet(true);
    return this;
  }

  public void unsetAverageTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __AVERAGETIME_ISSET_ID);
  }

  /** Returns true if field averageTime is set (has been assigned a value) and false otherwise */
  public boolean isSetAverageTime() {
    return EncodingUtils.testBit(__isset_bitfield, __AVERAGETIME_ISSET_ID);
  }

  public void setAverageTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __AVERAGETIME_ISSET_ID, value);
  }

  public long getMaxTime() {
    return this.maxTime;
  }

  public InterfaceStatus setMaxTime(long maxTime) {
    this.maxTime = maxTime;
    setMaxTimeIsSet(true);
    return this;
  }

  public void unsetMaxTime() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MAXTIME_ISSET_ID);
  }

  /** Returns true if field maxTime is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxTime() {
    return EncodingUtils.testBit(__isset_bitfield, __MAXTIME_ISSET_ID);
  }

  public void setMaxTimeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MAXTIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case LAST_VISIT:
      if (value == null) {
        unsetLastVisit();
      } else {
        setLastVisit((String)value);
      }
      break;

    case SUCCESS:
      if (value == null) {
        unsetSuccess();
      } else {
        setSuccess((Integer)value);
      }
      break;

    case FAILURE:
      if (value == null) {
        unsetFailure();
      } else {
        setFailure((Integer)value);
      }
      break;

    case HEALTH:
      if (value == null) {
        unsetHealth();
      } else {
        setHealth((Integer)value);
      }
      break;

    case AVERAGE_TIME:
      if (value == null) {
        unsetAverageTime();
      } else {
        setAverageTime((Long)value);
      }
      break;

    case MAX_TIME:
      if (value == null) {
        unsetMaxTime();
      } else {
        setMaxTime((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case LAST_VISIT:
      return getLastVisit();

    case SUCCESS:
      return Integer.valueOf(getSuccess());

    case FAILURE:
      return Integer.valueOf(getFailure());

    case HEALTH:
      return Integer.valueOf(getHealth());

    case AVERAGE_TIME:
      return Long.valueOf(getAverageTime());

    case MAX_TIME:
      return Long.valueOf(getMaxTime());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case LAST_VISIT:
      return isSetLastVisit();
    case SUCCESS:
      return isSetSuccess();
    case FAILURE:
      return isSetFailure();
    case HEALTH:
      return isSetHealth();
    case AVERAGE_TIME:
      return isSetAverageTime();
    case MAX_TIME:
      return isSetMaxTime();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof InterfaceStatus)
      return this.equals((InterfaceStatus)that);
    return false;
  }

  public boolean equals(InterfaceStatus that) {
    if (that == null)
      return false;

    boolean this_present_lastVisit = true && this.isSetLastVisit();
    boolean that_present_lastVisit = true && that.isSetLastVisit();
    if (this_present_lastVisit || that_present_lastVisit) {
      if (!(this_present_lastVisit && that_present_lastVisit))
        return false;
      if (!this.lastVisit.equals(that.lastVisit))
        return false;
    }

    boolean this_present_success = true;
    boolean that_present_success = true;
    if (this_present_success || that_present_success) {
      if (!(this_present_success && that_present_success))
        return false;
      if (this.success != that.success)
        return false;
    }

    boolean this_present_failure = true;
    boolean that_present_failure = true;
    if (this_present_failure || that_present_failure) {
      if (!(this_present_failure && that_present_failure))
        return false;
      if (this.failure != that.failure)
        return false;
    }

    boolean this_present_health = true;
    boolean that_present_health = true;
    if (this_present_health || that_present_health) {
      if (!(this_present_health && that_present_health))
        return false;
      if (this.health != that.health)
        return false;
    }

    boolean this_present_averageTime = true;
    boolean that_present_averageTime = true;
    if (this_present_averageTime || that_present_averageTime) {
      if (!(this_present_averageTime && that_present_averageTime))
        return false;
      if (this.averageTime != that.averageTime)
        return false;
    }

    boolean this_present_maxTime = true;
    boolean that_present_maxTime = true;
    if (this_present_maxTime || that_present_maxTime) {
      if (!(this_present_maxTime && that_present_maxTime))
        return false;
      if (this.maxTime != that.maxTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(InterfaceStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    InterfaceStatus typedOther = (InterfaceStatus)other;

    lastComparison = Boolean.valueOf(isSetLastVisit()).compareTo(typedOther.isSetLastVisit());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastVisit()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastVisit, typedOther.lastVisit);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(typedOther.isSetSuccess());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSuccess()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, typedOther.success);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailure()).compareTo(typedOther.isSetFailure());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailure()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failure, typedOther.failure);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHealth()).compareTo(typedOther.isSetHealth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHealth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.health, typedOther.health);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetAverageTime()).compareTo(typedOther.isSetAverageTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAverageTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.averageTime, typedOther.averageTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxTime()).compareTo(typedOther.isSetMaxTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxTime, typedOther.maxTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("InterfaceStatus(");
    boolean first = true;

    sb.append("lastVisit:");
    if (this.lastVisit == null) {
      sb.append("null");
    } else {
      sb.append(this.lastVisit);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("success:");
    sb.append(this.success);
    first = false;
    if (!first) sb.append(", ");
    sb.append("failure:");
    sb.append(this.failure);
    first = false;
    if (!first) sb.append(", ");
    sb.append("health:");
    sb.append(this.health);
    first = false;
    if (!first) sb.append(", ");
    sb.append("averageTime:");
    sb.append(this.averageTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxTime:");
    sb.append(this.maxTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (lastVisit == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lastVisit' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'success' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'failure' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'health' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'averageTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'maxTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InterfaceStatusStandardSchemeFactory implements SchemeFactory {
    public InterfaceStatusStandardScheme getScheme() {
      return new InterfaceStatusStandardScheme();
    }
  }

  private static class InterfaceStatusStandardScheme extends StandardScheme<InterfaceStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InterfaceStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // LAST_VISIT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lastVisit = iprot.readString();
              struct.setLastVisitIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUCCESS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.success = iprot.readI32();
              struct.setSuccessIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FAILURE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.failure = iprot.readI32();
              struct.setFailureIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HEALTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.health = iprot.readI32();
              struct.setHealthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // AVERAGE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.averageTime = iprot.readI64();
              struct.setAverageTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // MAX_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.maxTime = iprot.readI64();
              struct.setMaxTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSuccess()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'success' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetFailure()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'failure' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHealth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'health' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetAverageTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'averageTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMaxTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'maxTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InterfaceStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.lastVisit != null) {
        oprot.writeFieldBegin(LAST_VISIT_FIELD_DESC);
        oprot.writeString(struct.lastVisit);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
      oprot.writeI32(struct.success);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(FAILURE_FIELD_DESC);
      oprot.writeI32(struct.failure);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HEALTH_FIELD_DESC);
      oprot.writeI32(struct.health);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(AVERAGE_TIME_FIELD_DESC);
      oprot.writeI64(struct.averageTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_TIME_FIELD_DESC);
      oprot.writeI64(struct.maxTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InterfaceStatusTupleSchemeFactory implements SchemeFactory {
    public InterfaceStatusTupleScheme getScheme() {
      return new InterfaceStatusTupleScheme();
    }
  }

  private static class InterfaceStatusTupleScheme extends TupleScheme<InterfaceStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InterfaceStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeString(struct.lastVisit);
      oprot.writeI32(struct.success);
      oprot.writeI32(struct.failure);
      oprot.writeI32(struct.health);
      oprot.writeI64(struct.averageTime);
      oprot.writeI64(struct.maxTime);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InterfaceStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.lastVisit = iprot.readString();
      struct.setLastVisitIsSet(true);
      struct.success = iprot.readI32();
      struct.setSuccessIsSet(true);
      struct.failure = iprot.readI32();
      struct.setFailureIsSet(true);
      struct.health = iprot.readI32();
      struct.setHealthIsSet(true);
      struct.averageTime = iprot.readI64();
      struct.setAverageTimeIsSet(true);
      struct.maxTime = iprot.readI64();
      struct.setMaxTimeIsSet(true);
    }
  }

}

